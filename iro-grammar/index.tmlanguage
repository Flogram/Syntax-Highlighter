#################################################################
## Iro
################################################################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = flogram
file_extensions []     = flo;

################################################################
## Constants
################################################################

__MY_CONSTANT \= (\b[A-Z][A-Z0-9]*)

################################################################
## Styles
################################################################

styles [] {

.comment : style {
   color                 = light_green
   italic                = true
   ace_scope             = comment
   textmate_scope        = comment
   pygments_scope        = Comment
}

.keyword : style {
   color     = cyan
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.default : style {
   color                = white
}

.numeric : style {
   color                 = gold
   ace_scope             = constant.numeric
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}

.punctuation : style {
   color     = red_2
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.text : style {
   color                 = brown
   ace_scope             = text
   textmate_scope        = text
   pygments_scope        = String
}

.illegal : style {
   color                 = white
   background_color      = red
   ace_scope             = invalid
   textmate_scope        = invalid
   pygments_scope        = Generic.Error
}

.literal : style {
   color                 = red
   ace_scope             = text
   textmate_scope        = text
   pygments_scope        = Literal
}

.builtin : style {
   color                = #5F9EA0
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}


.constant : style {
   color = gold
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Literal
}

.type : style {
   color                 = pink
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Generic.Strong
}

.variable : style {
   color                = #E0115F
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Generic.Strong
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {

   
   : include "numeric" ;
   
   : inline_push {
      regex          \= (\")
      styles []       = .punctuation;
      default_style   = .text
      : pop {
         regex       \= (\")
         styles []    = .punctuation;
      }
   }
   
   : inline_push {
      regex          \= ([f][n][ ])
      styles []       = .keyword;
      default_style   = .type
      : pop {
         regex       \= (\W|_/g)
         styles []   = .punctuation;
      }
   }
   
   : inline_push {
      regex          \= (\[A-Za-z]*.)
      styles []       = .keyword;
      default_style   = .keyword
      : pop {
         regex       \= (\()|$\)
         styles []    = .keyword;
      }
   }
   
   : inline_push {
      regex          \= (\:\ )
      styles []       = .default;
      default_style   = .type
      : pop {
         regex       \= (\=|$|\)|,)
         styles []    = .default;
      }
   }
   
   : inline_push {
      regex          \= (\{)
      styles []       = .punctuation;
      : pop {  
         regex       \= (\})
         styles []    = .punctuation;
      }
      : include "main" ;
   }
   
   : inline_push {
      regex          \= (\()
      styles []       = .punctuation;
      : pop {  
         regex       \= (\))
         styles []    = .punctuation;
      }
      : include "main" ;
   }
   
   
   : pattern {
      regex          \= (#.*)
      styles []       = .comment;
   }
   
   :pattern {
      regex          \= (addr_of |any |as |bind |bits |bool |break |contract |else |enum |equals |export | get |if |iface |is |import |interface |length |list |loop |member |native |set |types |release |return |value_at |this|this. )
      styles []      = .keyword;
   }
   
   :pattern {
      regex          \=(true|true |false|false |null|null |zero|zero )
      styles []      = .builtin;
   }
   
   :pattern {
      regex       \=(self|self |this|this |break |break)
      styles []   =.literal;
   }
   
   :pattern {
      regex          \=(I8|I8 |I16|I16 |I32|I32 |I64|I64 |U8|U8 |U16|U16 |U32|U32 |U64|U64 |F8|F8 |F16|F16 |F32|F32 |F64|F64 |BOOL|BOOL )
      styles []      = .type;
   }
   
   :pattern {
      regex       \=(\b[A-Z|_][A-Z|_][A-Z0-9_]*)
      styles []      = .constant;
   }
   
   : inline_push {
      regex          \= (object )
      styles []       = .keyword;
      default_style   = .constant
      : pop {  
         regex       \= (:)
         styles []    = .default;
      }
   }
   
   : inline_push {
      regex          \= (mut )
      styles []       = .keyword;
      default_style   = .variable
      : pop {  
         regex       \= ( |:)
         styles []    = .default;
      }
   }
   
   : pattern {
      regex          \= (;)
      styles []       = .illegal;
   }
   
   : pattern {
      regex          \= (\))
      styles []       = .punctuation;
   }
   
   
   
}

#################################################
## End of Contexts
#################################################

###########################################
## Numeric Context
###########################################

numeric : context {
   : pattern {
      regex          \= (\b\d+)
      styles []       = .numeric;
   }
}

   
}
